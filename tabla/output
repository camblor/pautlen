segment .data 
	err_div0 db "Error al dividir entre 0"
	err_index db "Indice de vector fuera de rango"
segment .bss 
	__esp resd 1
	_x1 resd 1
;D:	function
segment .text
	global main
	extern scan_int, print_int, scan_float, scan_boolean, print_boolean
	extern print_endofline, print_blank, print_string
	extern alfa_malloc, alfa_free, ld_float
;R27:	<parametro_funcion> ::= <tipo> <TOK_IDENTIFICADOR>
;R26:	<resto_parametros_funcion> ::= 
;R23:	<parametros_funcion> ::= <parametro_funcion> <resto_parametros_funcion>
;R28:	<declaraciones_funcion> ::= <declaraciones>
	_fibonacci:
	push ebp
	mov ebp, esp
	sub esp, 4
	push dword 8
	lea eax, [ebp-8]
	push dword eax
; Cargar en eax la parte derecha de la asignación y en ebx la izquierda
	pop dword ebx
	pop dword eax
; Hacer la asignación efectiva
	mov dword [ebx] , eax
;D:	return
	lea eax, [ebp-8]
	push dword eax
	pop eax
	mov dword eax, [eax]
	mov esp, ebp
	pop ebp 
	ret
;R22:	<funcion> ::= function <tipo> <identificador> (<parametros_funcion>) {<declaraciones_funcion> <sentencias>}
main:
	mov dword [__esp] , esp
	push dword 663
	pop dword eax
	mov [_x1], eax 
	push dword 3
;D:	+
	push dword _x1
	pop dword ebx
	pop dword eax
	mov dword ebx, [ebx]
	add eax, ebx
	push dword eax
	call print_int
	add esp, 4
	call print_endofline
	jmp fin
fin_indice_fuera_rango:
	push dword err_index
	call print_string
	add esp, 4
	call print_endofline
	jmp fin
division_cero:
	push dword err_div0
	call print_string
	add esp, 4
	call print_endofline
fin:
	mov dword esp, [__esp]
	ret
